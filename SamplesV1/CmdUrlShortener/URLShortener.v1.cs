//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.IO;
using Google.Apis.Authentication;
using Google.Apis.Data;
using Google.Apis.Discovery;
using Google.Apis.Requests;
using Google.Apis.Util;
using log4net;
using Newtonsoft.Json;

namespace Google.Apis.Data
{
    using System.Collections.Generic;


    public class AnalyticsSnapshot
    {
        /// <summary>Top browsers, e.g. &quot;Chrome&quot;; sorted by (descending) click counts. Only present if this data is available.</summary>
        [JsonProperty("browsers")]
        public virtual IList<StringCount> Browsers { get; set; }

        /// <summary>Top countries (expressed as country codes), e.g. &quot;US&quot; or &quot;DE&quot;; sorted by (descending) click counts. Only present if this data is available.</summary>
        [JsonProperty("countries")]
        public virtual IList<StringCount> Countries { get; set; }

        /// <summary>Number of clicks on all goo.gl short URLs pointing to this long URL.</summary>
        [JsonProperty("longUrlClicks")]
        public virtual string LongUrlClicks { get; set; }

        /// <summary>Top platforms or OSes, e.g. &quot;Windows&quot;; sorted by (descending) click counts. Only present if this data is available.</summary>
        [JsonProperty("platforms")]
        public virtual IList<StringCount> Platforms { get; set; }

        /// <summary>Top referring hosts, e.g. &quot;www.google.com&quot;; sorted by (descending) click counts. Only present if this data is available.</summary>
        [JsonProperty("referrers")]
        public virtual IList<StringCount> Referrers { get; set; }

        /// <summary>Number of clicks on this short URL.</summary>
        [JsonProperty("shortUrlClicks")]
        public virtual string ShortUrlClicks { get; set; }
    }

    public class AnalyticsSummary
    {
        [JsonProperty("allTime")]
        public virtual AnalyticsSnapshot AllTime { get; set; }

        [JsonProperty("day")]
        public virtual AnalyticsSnapshot Day { get; set; }

        [JsonProperty("month")]
        public virtual AnalyticsSnapshot Month { get; set; }

        [JsonProperty("twoHours")]
        public virtual AnalyticsSnapshot TwoHours { get; set; }

        [JsonProperty("week")]
        public virtual AnalyticsSnapshot Week { get; set; }
    }

    public class StringCount
    {
        /// <summary>Number of clicks for this top entry, e.g. for this particular country or browser.</summary>
        [JsonProperty("count")]
        public virtual string Count { get; set; }

        /// <summary>Label assigned to this top entry, e.g. &quot;US&quot; or &quot;Chrome&quot;.</summary>
        [JsonProperty("id")]
        public virtual string Id { get; set; }
    }

    public class Url
    {
        [JsonProperty("analytics")]
        public virtual AnalyticsSummary Analytics { get; set; }

        /// <summary>Time the short URL was created; ISO 8601 representation using the yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSZZ format, e.g. &quot;2010-10-14T19:01:24.944+00:00&quot;.</summary>
        [JsonProperty("created")]
        public virtual string Created { get; set; }

        /// <summary>Short URL, e.g. &quot;http://goo.gl/l6MS&quot;.</summary>
        [JsonProperty("id")]
        public virtual string Id { get; set; }

        /// <summary>The fixed string &quot;urlshortener#url&quot;.</summary>
        [JsonProperty("kind")]
        public virtual string Kind { get; set; }

        /// <summary>Long URL, e.g. &quot;http://www.google.com/&quot;. Might not be present if the status is &quot;REMOVED&quot;.</summary>
        [JsonProperty("longUrl")]
        public virtual string LongUrl { get; set; }

        /// <summary>Status of the target URL. Possible values: &quot;OK&quot;, &quot;MALWARE&quot;, &quot;PHISHING&quot;, or &quot;REMOVED&quot;. A URL might be marked &quot;REMOVED&quot; if it was flagged as spam, for example.</summary>
        [JsonProperty("status")]
        public virtual string Status { get; set; }
    }

    public class UrlHistory
    {
        /// <summary>A list of URL resources.</summary>
        [JsonProperty("items")]
        public virtual IList<Url> Items { get; set; }

        /// <summary>Number of items returned with each full &quot;page&quot; of results. Note that the last page could have fewer items than the &quot;itemsPerPage&quot; value.</summary>
        [JsonProperty("itemsPerPage")]
        public virtual long ItemsPerPage { get; set; }

        /// <summary>The fixed string &quot;urlshortener#urlHistory&quot;.</summary>
        [JsonProperty("kind")]
        public virtual string Kind { get; set; }

        /// <summary>A token to provide to get the next page of results.</summary>
        [JsonProperty("nextPageToken")]
        public virtual string NextPageToken { get; set; }

        /// <summary>Total number of short URLs associated with this user (may be approximate).</summary>
        [JsonProperty("totalItems")]
        public virtual long TotalItems { get; set; }
    }
}

namespace Google.Apis
{
    public class UrlshortenerService : IRequestExecutor, ISchemaAwareRequestExecutor
    {
        private const string Version = "v1";

        private const string Name = "urlshortener";

        private const string BaseUri = "https://www.googleapis.com/urlshortener/v1/";

        private const DiscoveryVersion DiscoveryVersionUsed = DiscoveryVersion.Version_1_0;
        private readonly IAuthenticator authenticator;
        private readonly IService genericService;

        private readonly Url url;
        private JsonSerializer newtonJsonSerilizer;

        public UrlshortenerService(IService genericService, IAuthenticator authenticator)
        {
            this.genericService = genericService;
            this.authenticator = authenticator;
            url = new Url(this);
        }

        public UrlshortenerService()
            : this(
                new DiscoveryService(
                    new WebDiscoveryDevice(
                        new Uri(
                            string.Format("https://www.googleapis.com/discovery/v1/apis/{0}/{1}/rest", Name, Version))))
                    .GetService(Version, DiscoveryVersionUsed, new FactoryParameterV1_0("https://www.googleapis.com", BaseUri)),
                AuthenticatorFactory.GetInstance().GetRegisteredAuthenticator()) {}

        private JsonSerializer NewtonJsonSerilizer
        {
            get
            {
                if ((newtonJsonSerilizer == null))
                {
                    JsonSerializerSettings settings = new JsonSerializerSettings();
                    settings.NullValueHandling = NullValueHandling.Ignore;
                    newtonJsonSerilizer = JsonSerializer.Create(settings);
                }
                return newtonJsonSerilizer;
            }
        }

        /// <summary>Sets the DeveloperKey which this service uses for all requests</summary>
        public virtual string DeveloperKey { get; set; }

        public virtual Url Url
        {
            get { return url; }
        }

        #region IRequestExecutor Members

        public virtual Stream ExecuteRequest(string resource,
                                             string method,
                                             string body,
                                             IDictionary<string, object> parameters)
        {
            IRequest request = genericService.CreateRequest(resource, method);
            if (string.IsNullOrEmpty(DeveloperKey) == false)
            {
                request = request.WithDeveloperKey(DeveloperKey);
            }
            return request.WithParameters(parameters).WithAuthentication(authenticator).WithBody(body).ExecuteRequest();
        }

        #endregion

        #region ISchemaAwareRequestExecutor Members

        public virtual Stream ExecuteRequest(string resource,
                                             string method,
                                             object body,
                                             IDictionary<string, object> parameters)
        {
            return ExecuteRequest(resource, method, ObjectToJson(body), parameters);
        }

        public virtual string ObjectToJson(object obj)
        {
            TextWriter tw = new StringWriter();
            NewtonJsonSerilizer.Serialize(tw, obj);
            return tw.ToString();
        }

        public virtual TOutput JsonToObject<TOutput>(Stream stream)
        {
            StreamReader streamReader = new StreamReader(stream);
            string str = streamReader.ReadToEnd();
            try
            {
                StandardResponse<TOutput> response = JsonConvert.DeserializeObject<StandardResponse<TOutput>>(str);
                if ((response.Data == null))
                {
                    throw new ApplicationException(
                        string.Format("Failed to get response from stream, error was [{0}]", response.Error));
                }
                return response.Data;
            }
            catch (Exception ex)
            {
                throw new ApplicationException(
                    string.Format("Failed to generate object of type[{0}] from Json[{1}]", typeof(TOutput).Name, str),
                    ex);
            }
        }

        #endregion
    }

    public class Url
    {
        private const string Resource = "url";

        private readonly ILog logger = LogManager.GetLogger(typeof(Url));
        private readonly ISchemaAwareRequestExecutor service;

        public Url(UrlshortenerService service)
        {
            this.service = service;
        }

        /// <summary>Expands a short URL or gets creation time and analytics.</summary>
        /// <param name="shortUrl">Required - The short URL, including the protocol.</param>
        /// <param name="projection">Optional - Must be one of the following values [ANALYTICS_CLICKS, ANALYTICS_TOP_STRINGS, FULL] - Additional information to return.</param>
        public virtual Stream Get(string shortUrl, string projection)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["shortUrl"] = shortUrl;
            parameters["projection"] = projection;
            logger.Debug("Executing url.get");
            Stream ret = service.ExecuteRequest(Resource, "get", body, parameters);
            logger.Debug("Done Executing url.get");
            return ret;
        }

        /// <summary>Creates a new short URL.</summary>
        public virtual Stream Insert(string body)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            logger.Debug("Executing url.insert");
            Stream ret = service.ExecuteRequest(Resource, "insert", body, parameters);
            logger.Debug("Done Executing url.insert");
            return ret;
        }

        /// <summary>Retrieves a list of URLs shortened by a user.</summary>
        /// <param name="projection">Optional - Must be one of the following values [ANALYTICS_CLICKS, FULL] - Additional information to return.</param>
        /// <param name="startToken">start-token - Optional - Token for requesting successive pages of results.</param>
        public virtual Stream List(string projection, string startToken)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["projection"] = projection;
            parameters["start-token"] = startToken;
            logger.Debug("Executing url.list");
            Stream ret = service.ExecuteRequest(Resource, "list", body, parameters);
            logger.Debug("Done Executing url.list");
            return ret;
        }

        /// <summary>Expands a short URL or gets creation time and analytics.</summary>
        /// <param name="shortUrl">Required - The short URL, including the protocol.</param>
        /// <param name="projection">Optional - Must be one of the following values [ANALYTICS_CLICKS, ANALYTICS_TOP_STRINGS, FULL] - Additional information to return.</param>
        public virtual Data.Url GetAsObject(string shortUrl, string projection)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["shortUrl"] = shortUrl;
            parameters["projection"] = projection;
            logger.Debug("Executing url.get");
            Data.Url ret = service.JsonToObject<Data.Url>(service.ExecuteRequest(Resource, "get", body, parameters));
            logger.Debug("Done Executing url.get");
            return ret;
        }

        /// <summary>Creates a new short URL.</summary>
        public virtual Data.Url InsertAsObject(Data.Url body)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            logger.Debug("Executing url.insert");
            Data.Url ret =
                service.JsonToObject<Data.Url>(
                    service.ExecuteRequest(Resource, "insert", service.ObjectToJson(body), parameters));
            logger.Debug("Done Executing url.insert");
            return ret;
        }

        /// <summary>Retrieves a list of URLs shortened by a user.</summary>
        /// <param name="projection">Optional - Must be one of the following values [ANALYTICS_CLICKS, FULL] - Additional information to return.</param>
        /// <param name="startToken">start-token - Optional - Token for requesting successive pages of results.</param>
        public virtual UrlHistory ListAsObject(string projection, string startToken)
        {
            string body = null;
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters["projection"] = projection;
            parameters["start-token"] = startToken;
            logger.Debug("Executing url.list");
            UrlHistory ret = service.JsonToObject<UrlHistory>(
                service.ExecuteRequest(Resource, "list", body, parameters));
            logger.Debug("Done Executing url.list");
            return ret;
        }

        /// <summary>Expands a short URL or gets creation time and analytics.</summary>
        /// <param name="shortUrl">Required - The short URL, including the protocol.</param>
        public virtual Stream Get(string shortUrl, IDictionary<string, object> parameters)
        {
            string body = null;
            parameters["shortUrl"] = shortUrl;
            logger.Debug("Executing url.get");
            Stream ret = service.ExecuteRequest(Resource, "get", body, parameters);
            logger.Debug("Done Executing url.get");
            return ret;
        }

        /// <summary>Retrieves a list of URLs shortened by a user.</summary>
        public virtual Stream List(IDictionary<string, object> parameters)
        {
            string body = null;
            logger.Debug("Executing url.list");
            Stream ret = service.ExecuteRequest(Resource, "list", body, parameters);
            logger.Debug("Done Executing url.list");
            return ret;
        }
    }
}