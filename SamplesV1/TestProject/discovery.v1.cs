//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.IO;
using Google.Apis.Authentication;
using Google.Apis.Data;
using Google.Apis.Discovery;
using Google.Apis.Requests;
using Google.Apis.Util;
using log4net;
using Newtonsoft.Json;

namespace Google.Apis.Data
{
    public class DirectoryList
    {
        /// <summary>The individual directory entries.  One entry per api/version pair.</summary>
        [JsonProperty("items")]
        public virtual IList<NestedClass1> Items { get; set; }

        /// <summary>The kind for this response.</summary>
        [JsonProperty("kind")]
        public virtual string Kind { get; set; }

        public class NestedClass1
        {
            /// <summary>The description of this API.</summary>
            [JsonProperty("description")]
            public virtual string Description { get; set; }

            /// <summary>A link to the discovery document.</summary>
            [JsonProperty("discoveryLink")]
            public virtual string DiscoveryLink { get; set; }

            /// <summary>A link to human readable documentation for the API.</summary>
            [JsonProperty("documentationLink")]
            public virtual string DocumentationLink { get; set; }

            /// <summary>Links to 16x16 and 32x32 icons representing the API.</summary>
            [JsonProperty("icons")]
            public virtual NestedClass1_1 Icons { get; set; }

            /// <summary>The id of this API.</summary>
            [JsonProperty("id")]
            public virtual string Id { get; set; }

            /// <summary>The kind for this response.</summary>
            [JsonProperty("kind")]
            public virtual string Kind { get; set; }

            /// <summary>Labels for the status of this API, such as labs or deprecated.</summary>
            [JsonProperty("labels")]
            public virtual IList<String> Labels { get; set; }

            /// <summary>The name of the API.</summary>
            [JsonProperty("name")]
            public virtual string Name { get; set; }

            /// <summary>True if this version is the preferred version to use.</summary>
            [JsonProperty("preferred")]
            public virtual bool Preferred { get; set; }

            /// <summary>The title of this API.</summary>
            [JsonProperty("title")]
            public virtual string Title { get; set; }

            /// <summary>The version of the API.</summary>
            [JsonProperty("version")]
            public virtual string Version { get; set; }

            /// <summary>Links to 16x16 and 32x32 icons representing the API.</summary>
            public class NestedClass1_1
            {
                /// <summary>The url of the 16x16 icon.</summary>
                [JsonProperty("x16")]
                public virtual string X16 { get; set; }

                /// <summary>The url of the 32x32 icon.</summary>
                [JsonProperty("x32")]
                public virtual string X32 { get; set; }
            }
        }
    }

    public class Jsonschema
    {
        /// <summary>A reference to another schema.  The value of this property is the &quot;id&quot; of another schema.</summary>
        [JsonProperty("$ref")]
        public virtual string RefProperty0 { get; set; }

        [JsonProperty("additionalProperties")]
        public virtual Jsonschema AdditionalProperties { get; set; }

        /// <summary>The default value of this property (if one exists).</summary>
        [JsonProperty("default")]
        public virtual string DefaultProperty2 { get; set; }

        /// <summary>A description of this object.</summary>
        [JsonProperty("description")]
        public virtual string Description { get; set; }

        /// <summary>Values this parameter may take (if it is an enum).</summary>
        [JsonProperty("enum")]
        public virtual IList<String> EnumProperty4 { get; set; }

        /// <summary>The descriptions for the enums.  Each position maps to the corresponding value in the &quot;enum&quot; array.</summary>
        [JsonProperty("enumDescriptions")]
        public virtual IList<String> EnumDescriptions { get; set; }

        /// <summary>An additional regular expression or key that helps constrain the value. For more details see: http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.23</summary>
        [JsonProperty("format")]
        public virtual string Format { get; set; }

        /// <summary>Unique identifier for this schema.</summary>
        [JsonProperty("id")]
        public virtual string Id { get; set; }

        [JsonProperty("items")]
        public virtual Jsonschema Items { get; set; }

        /// <summary>Whether this parameter goes in the query or the path for REST requests.</summary>
        [JsonProperty("location")]
        public virtual string Location { get; set; }

        /// <summary>The maximum value of this parameter.</summary>
        [JsonProperty("maximum")]
        public virtual string Maximum { get; set; }

        /// <summary>The minimum value of this parameter.</summary>
        [JsonProperty("minimum")]
        public virtual string Minimum { get; set; }

        /// <summary>The regular expression this parameter must conform to.</summary>
        [JsonProperty("pattern")]
        public virtual string Pattern { get; set; }

        /// <summary>If this is a schema for an object, list the schema for each property of this object.</summary>
        [JsonProperty("properties")]
        public virtual NestedClass1 Properties { get; set; }

        /// <summary>Whether this parameter may appear multiple times.</summary>
        [JsonProperty("repeated")]
        public virtual bool Repeated { get; set; }

        /// <summary>Whether the parameter is required.</summary>
        [JsonProperty("required")]
        public virtual bool Required { get; set; }

        /// <summary>The value type for this schema.  A list of values can be found here: http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.1</summary>
        [JsonProperty("type")]
        public virtual string Type { get; set; }

        /// <summary>If this is a schema for an object, list the schema for each property of this object.</summary>
        public class NestedClass1 {}
    }

    public class RestDescription
    {
        /// <summary>Authentication information.</summary>
        [JsonProperty("auth")]
        public virtual NestedClass1 Auth { get; set; }

        /// <summary>The base URI path for REST requests.</summary>
        [JsonProperty("basePath")]
        public virtual string BasePath { get; set; }

        /// <summary>The description of this API.</summary>
        [JsonProperty("description")]
        public virtual string Description { get; set; }

        /// <summary>A link to human readable documentation for the API.</summary>
        [JsonProperty("documentationLink")]
        public virtual string DocumentationLink { get; set; }

        /// <summary>A list of supported features for this API.</summary>
        [JsonProperty("features")]
        public virtual IList<String> Features { get; set; }

        /// <summary>Links to 16x16 and 32x32 icons representing the API.</summary>
        [JsonProperty("icons")]
        public virtual NestedClass2 Icons { get; set; }

        /// <summary>The id of this API.</summary>
        [JsonProperty("id")]
        public virtual string Id { get; set; }

        /// <summary>The kind for this response.</summary>
        [JsonProperty("kind")]
        public virtual string Kind { get; set; }

        /// <summary>Labels for the status of this API, such as labs or deprecated.</summary>
        [JsonProperty("labels")]
        public virtual IList<String> Labels { get; set; }

        /// <summary>API-level methods for this API.</summary>
        [JsonProperty("methods")]
        public virtual NestedClass3 Methods { get; set; }

        /// <summary>The name of this API.</summary>
        [JsonProperty("name")]
        public virtual string Name { get; set; }

        /// <summary>The protocol described by this document.</summary>
        [JsonProperty("protocol")]
        public virtual string Protocol { get; set; }

        /// <summary>The resources in this API.</summary>
        [JsonProperty("resources")]
        public virtual NestedClass4 Resources { get; set; }

        /// <summary>The schemas for this API.</summary>
        [JsonProperty("schemas")]
        public virtual NestedClass5 Schemas { get; set; }

        /// <summary>The title of this API.</summary>
        [JsonProperty("title")]
        public virtual string Title { get; set; }

        /// <summary>The version of this API.</summary>
        [JsonProperty("version")]
        public virtual string Version { get; set; }

        /// <summary>Authentication information.</summary>
        public class NestedClass1
        {
            /// <summary>OAuth 2.0 authentication information.</summary>
            [JsonProperty("oauth2")]
            public virtual NestedClass1_1 Oauth2 { get; set; }

            /// <summary>OAuth 2.0 authentication information.</summary>
            public class NestedClass1_1
            {
                /// <summary>Available OAuth 2.0 scopes.</summary>
                [JsonProperty("scopes")]
                public virtual NestedClass1_1_1 Scopes { get; set; }

                /// <summary>Available OAuth 2.0 scopes.</summary>
                public class NestedClass1_1_1 {}
            }
        }

        /// <summary>Links to 16x16 and 32x32 icons representing the API.</summary>
        public class NestedClass2
        {
            /// <summary>The url of the 16x16 icon.</summary>
            [JsonProperty("x16")]
            public virtual string X16 { get; set; }

            /// <summary>The url of the 32x32 icon.</summary>
            [JsonProperty("x32")]
            public virtual string X32 { get; set; }
        }

        /// <summary>API-level methods for this API.</summary>
        public class NestedClass3 {}

        /// <summary>The resources in this API.</summary>
        public class NestedClass4 {}

        /// <summary>The schemas for this API.</summary>
        public class NestedClass5 {}
    }

    public class Restmethod
    {
        /// <summary>Description of this method.</summary>
        [JsonProperty("description")]
        public virtual string Description { get; set; }

        /// <summary>HTTP method used by this method.</summary>
        [JsonProperty("httpMethod")]
        public virtual string HttpMethod { get; set; }

        /// <summary>A unique ID for this method.  This property can be used to match methods between different versions of Discovery.</summary>
        [JsonProperty("id")]
        public virtual string Id { get; set; }

        /// <summary>Ordered list of required parameters, serves as a hint to clients on how to structure their method signatures.  The array is ordered such that the &quot;most-significant&quot; parameter appears first.</summary>
        [JsonProperty("parameterOrder")]
        public virtual IList<String> ParameterOrder { get; set; }

        /// <summary>Details for all parameters in this method.</summary>
        [JsonProperty("parameters")]
        public virtual NestedClass1 Parameters { get; set; }

        /// <summary>The URI path of this REST method.  Should be used in conjunction with the restBasePath property at the api-level.</summary>
        [JsonProperty("path")]
        public virtual string Path { get; set; }

        /// <summary>The schema for the request.</summary>
        [JsonProperty("request")]
        public virtual NestedClass2 Request { get; set; }

        /// <summary>The schema for the response.</summary>
        [JsonProperty("response")]
        public virtual NestedClass3 Response { get; set; }

        /// <summary>OAuth 2.0 scopes applicable to this method.</summary>
        [JsonProperty("scopes")]
        public virtual IList<String> Scopes { get; set; }

        /// <summary>Details for all parameters in this method.</summary>
        public class NestedClass1 {}

        /// <summary>The schema for the request.</summary>
        public class NestedClass2
        {
            /// <summary>Schema ID for the request schema.</summary>
            [JsonProperty("$ref")]
            public virtual string RefProperty0 { get; set; }
        }

        /// <summary>The schema for the response.</summary>
        public class NestedClass3
        {
            /// <summary>Schema ID for the response schema.</summary>
            [JsonProperty("$ref")]
            public virtual string RefProperty0 { get; set; }
        }
    }

    public class Restresource
    {
        /// <summary>Methods on this resource.</summary>
        [JsonProperty("methods")]
        public virtual NestedClass1 Methods { get; set; }

        /// <summary>Sub-resources on this resource.</summary>
        [JsonProperty("resources")]
        public virtual NestedClass2 Resources { get; set; }

        /// <summary>Methods on this resource.</summary>
        public class NestedClass1 {}

        /// <summary>Sub-resources on this resource.</summary>
        public class NestedClass2 {}
    }
}

namespace Google.Apis
{
    public class DiscoveryService : IRequestExecutor, ISchemaAwareRequestExecutor
    {
        private readonly IService genericService;

        private readonly IAuthenticator authenticator;

        private const string Version = "v1";

        private const string Name = "discovery";

        private const string BaseUri = "https://www.googleapis.com//discovery/v1/";

        private const DiscoveryVersion DiscoveryVersionUsed = DiscoveryVersion.Version_1_0;

        private JsonSerializer newtonJsonSerilizer;

        private readonly Apis apis;

        public DiscoveryService(IService genericService, IAuthenticator authenticator)
        {
            this.genericService = genericService;
            this.authenticator = authenticator;
            apis = new Apis(this);
        }

        public DiscoveryService() :
            this(
            new Discovery.DiscoveryService(
                new WebDiscoveryDevice(
                    new Uri(string.Format("https://www.googleapis.com/discovery/v1/apis/{0}/{1}/rest", Name, Version))))
                .GetService(Version, DiscoveryVersionUsed, new FactoryParameterV1_0(null, BaseUri)),
            AuthenticatorFactory.GetInstance().GetRegisteredAuthenticator()) {}

        private JsonSerializer NewtonJsonSerilizer
        {
            get
            {
                if ((newtonJsonSerilizer == null))
                {
                    var settings = new JsonSerializerSettings();
                    settings.NullValueHandling = NullValueHandling.Ignore;
                    newtonJsonSerilizer = JsonSerializer.Create(settings);
                }
                return newtonJsonSerilizer;
            }
        }

        /// <summary>Sets the DeveloperKey which this service uses for all requests</summary>
        public virtual string DeveloperKey { get; set; }

        public virtual Apis Apis
        {
            get { return apis; }
        }

        public virtual Stream ExecuteRequest(string resource, string method, string body,
                                             IDictionary<string, object> parameters)
        {
            IRequest request = genericService.CreateRequest(resource, method);
            if (string.IsNullOrEmpty(DeveloperKey) == false)
            {
                request = request.WithDeveloperKey(DeveloperKey);
            }
            return request.WithParameters(parameters).WithAuthentication(authenticator).WithBody(body).ExecuteRequest();
        }

        public virtual Stream ExecuteRequest(string resource, string method, object body,
                                             IDictionary<string, object> parameters)
        {
            return ExecuteRequest(resource, method, ObjectToJson(body), parameters);
        }

        public virtual string ObjectToJson(object obj)
        {
            TextWriter tw = new StringWriter();
            NewtonJsonSerilizer.Serialize(tw, obj);
            return tw.ToString();
        }

        public virtual TOutput JsonToObject<TOutput>(Stream stream)
        {
            var streamReader = new StreamReader(stream);
            string str = streamReader.ReadToEnd();
            try
            {
                var response = JsonConvert.DeserializeObject<StandardResponse<TOutput>>(str);
                if ((response.Data == null))
                {
                    throw new ApplicationException(string.Format("Failed to get response from stream, error was [{0}]",
                                                                 response.Error));
                }
                return response.Data;
            }
            catch (Exception ex)
            {
                throw new ApplicationException(
                    string.Format("Failed to generate object of type[{0}] from Json[{1}]", typeof (TOutput).Name, str),
                    ex);
            }
        }
    }

    public class Apis
    {
        private readonly ISchemaAwareRequestExecutor service;

        private const string Resource = "apis";

        private readonly ILog logger = LogManager.GetLogger(typeof (Apis));

        public Apis(DiscoveryService service)
        {
            this.service = service;
        }

        /// <summary>Retrieve the description of a particular version of an api.</summary>
        /// <param name="api">Required - The name of the API.</param>
        /// <param name="version">Required - The version of the API.</param>
        public virtual Stream GetRest(string api, string version)
        {
            string body = null;
            var parameters = new Dictionary<string, object>();
            parameters["api"] = api;
            parameters["version"] = version;
            logger.Debug("Executing apis.getRest");
            Stream ret = service.ExecuteRequest(Resource, "getRest", body, parameters);
            logger.Debug("Done Executing apis.getRest");
            return ret;
        }

        /// <summary>Retrieve the list of APIs supported at this endpoint.</summary>
        /// <param name="label">Optional - Must be one of the following values [deprecated, graduated, labs] - Only include APIs with a matching label, such as &apos;graduated&apos; or &apos;labs&apos;.</param>
        /// <param name="name">Optional - Only include APIs with the given name.</param>
        /// <param name="preferred">Optional - Return only the preferred version of an API.</param>
        public virtual Stream List(string label, string name, bool preferred)
        {
            string body = null;
            var parameters = new Dictionary<string, object>();
            parameters["label"] = label;
            parameters["name"] = name;
            parameters["preferred"] = preferred;
            logger.Debug("Executing apis.list");
            Stream ret = service.ExecuteRequest(Resource, "list", body, parameters);
            logger.Debug("Done Executing apis.list");
            return ret;
        }

        /// <summary>Retrieve the description of a particular version of an api.</summary>
        /// <param name="api">Required - The name of the API.</param>
        /// <param name="version">Required - The version of the API.</param>
        public virtual RestDescription GetRestAsObject(string api, string version)
        {
            string body = null;
            var parameters = new Dictionary<string, object>();
            parameters["api"] = api;
            parameters["version"] = version;
            logger.Debug("Executing apis.getRest");
            var ret =
                service.JsonToObject<RestDescription>(service.ExecuteRequest(Resource, "getRest", body, parameters));
            logger.Debug("Done Executing apis.getRest");
            return ret;
        }

        /// <summary>Retrieve the list of APIs supported at this endpoint.</summary>
        /// <param name="label">Optional - Must be one of the following values [deprecated, graduated, labs] - Only include APIs with a matching label, such as &apos;graduated&apos; or &apos;labs&apos;.</param>
        /// <param name="name">Optional - Only include APIs with the given name.</param>
        /// <param name="preferred">Optional - Return only the preferred version of an API.</param>
        public virtual DirectoryList ListAsObject(string label, string name, bool preferred)
        {
            string body = null;
            var parameters = new Dictionary<string, object>();
            parameters["label"] = label;
            parameters["name"] = name;
            parameters["preferred"] = preferred;
            logger.Debug("Executing apis.list");
            var ret =
                service.JsonToObject<DirectoryList>(service.ExecuteRequest(Resource, "list", body, parameters));
            logger.Debug("Done Executing apis.list");
            return ret;
        }

        /// <summary>Retrieve the list of APIs supported at this endpoint.</summary>
        public virtual Stream List(IDictionary<string, object> parameters)
        {
            string body = null;
            logger.Debug("Executing apis.list");
            Stream ret = service.ExecuteRequest(Resource, "list", body, parameters);
            logger.Debug("Done Executing apis.list");
            return ret;
        }
    }
}
