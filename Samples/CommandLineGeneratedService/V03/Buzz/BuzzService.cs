// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Google.Apis.Samples.CommandLineGeneratedService.V03.Buzz.Data {
    
    
    public class Activitiylist {
    }
    
    public class ChiliActivitiesCountJson {
    }
    
    public class ChiliActivitiesExtractpeoplefromsearchJson {
    }
    
    public class ChiliActivitiesListJson {
    }
    
    public class ChiliActivitiesResourceJson {
    }
    
    public class ChiliActivitiesSearchJson {
    }
    
    public class ChiliActivitiesTrackJson {
    }
    
    public class ChiliCommentsListJson {
    }
    
    public class ChiliCommentsResourceJson {
    }
    
    public class ChiliEntitiesListJson {
    }
    
    public class ChiliEntitiesStarredAddJson {
    }
    
    public class ChiliEntitiesStarredListJson {
    }
    
    public class ChiliEntitiesStarredResource {
    }
    
    public class ChiliEntitiesdefaultaclResourceJson {
    }
    
    public class ChiliGroupsListJson {
    }
    
    public class ChiliGroupsResourceJson {
    }
    
    public class ChiliPeopleLikedJson {
    }
    
    public class ChiliPeopleListJson {
    }
    
    public class ChiliPeopleResharedJson {
    }
    
    public class ChiliPeopleResourceJson {
    }
    
    public class ChiliPeopleSearchJson {
    }
    
    public class ChiliPhotoalbumsListJson {
    }
    
    public class ChiliPhotoalbumsResourceJson {
    }
    
    public class ChiliPhotosInsertJson {
    }
    
    public class ChiliPhotosListJson {
    }
    
    public class ChiliPhotosResourceJson {
    }
    
    public class ChiliRelatedListJson {
    }
    
    public class ChiliRelatedResourceJson {
    }
    
    public class ChiliVideosListJson {
    }
    
    public class Link {
    }
    
    public class Video {
    }
}
namespace Google.Apis.Samples.CommandLineGeneratedService.V03.Buzz {
    using System;
    using System.IO;
    using System.Collections.Generic;
    using Google.Apis;
    using Google.Apis.Discovery;
    
    
    public class BuzzService : Google.Apis.Discovery.IRequestExecutor {
        
        private Google.Apis.Discovery.IService genericService;
        
        private Google.Apis.Authentication.IAuthenticator authenticator;
        
        private const string Version = "v1";
        
        private const string Name = "buzz";
        
        private const string BaseUri = "http://example.url.com/buzz/v1/";
        
        private const Google.Apis.Discovery.DiscoveryVersion DiscoveryVersionUsed = Google.Apis.Discovery.DiscoveryVersion.Version_0_3;
        
        private Activities activities;
        
        public BuzzService(Google.Apis.Discovery.IService genericService, Google.Apis.Authentication.IAuthenticator authenticator) {
            this.genericService = genericService;
            this.authenticator = authenticator;
            this.activities = new Activities(this);
        }
        
        public BuzzService() : 
                this(new Google.Apis.Discovery.DiscoveryService(new Google.Apis.Discovery.WebDiscoveryDevice(new System.Uri(("https://www.googleapis.com/discovery/0.1/describe?api=" + BuzzService.Name)))).GetService(BuzzService.Version, BuzzService.DiscoveryVersionUsed, new Google.Apis.Discovery.FactoryParameterV0_3(null, BuzzService.BaseUri)), Google.Apis.Authentication.AuthenticatorFactory.GetInstance().GetRegisteredAuthenticator()) {
        }
        
        public virtual Activities Activities {
            get {
                return this.activities;
            }
        }
        
        public virtual System.IO.Stream ExecuteRequest(string resource, string method, string body, System.Collections.Generic.IDictionary<string, string> parameters) {
            Google.Apis.Requests.IRequest request = this.genericService.CreateRequest(resource, method);
            return request.WithParameters(parameters).WithAuthentication(authenticator).WithBody(body).ExecuteRequest();
        }
    }
    
    public class Activities {
        
        private Google.Apis.Discovery.IRequestExecutor service;
        
        private const string Resource = "activities";
        
        private log4net.ILog logger = log4net.LogManager.GetLogger(typeof(Activities));
        
        public Activities(BuzzService service) {
            this.service = service;
        }
        
        public virtual System.IO.Stream Count(string hl) {
            string body = null;
            System.Collections.Generic.Dictionary<string, string> parameters = new System.Collections.Generic.Dictionary<string, string>();
            parameters["hl"] = hl;
            logger.Debug("Executing activities.count");
            System.IO.Stream ret = this.service.ExecuteRequest(Activities.Resource, "count", body, parameters);
            logger.Debug("Done Executing activities.count");
            return ret;
        }
        
        public virtual System.IO.Stream Delete(string alt, string hl, string postId, string scope, string userId) {
            string body = null;
            System.Collections.Generic.Dictionary<string, string> parameters = new System.Collections.Generic.Dictionary<string, string>();
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            logger.Debug("Executing activities.delete");
            System.IO.Stream ret = this.service.ExecuteRequest(Activities.Resource, "delete", body, parameters);
            logger.Debug("Done Executing activities.delete");
            return ret;
        }
        
        public virtual System.IO.Stream ExtractPeopleFromSearch(string alt, string bbox, string c, string hl, string lat, string lon, string maxresultsParam7, string pid, string q, string radius) {
            string body = null;
            System.Collections.Generic.Dictionary<string, string> parameters = new System.Collections.Generic.Dictionary<string, string>();
            parameters["alt"] = alt;
            parameters["bbox"] = bbox;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["lat"] = lat;
            parameters["lon"] = lon;
            parameters["max-results"] = maxresultsParam7;
            parameters["pid"] = pid;
            parameters["q"] = q;
            parameters["radius"] = radius;
            logger.Debug("Executing activities.extractPeopleFromSearch");
            System.IO.Stream ret = this.service.ExecuteRequest(Activities.Resource, "extractPeopleFromSearch", body, parameters);
            logger.Debug("Done Executing activities.extractPeopleFromSearch");
            return ret;
        }
        
        public virtual System.IO.Stream Get(string alt, string hl, string postId, string targetLang, string truncateAtom, string userId) {
            string body = null;
            System.Collections.Generic.Dictionary<string, string> parameters = new System.Collections.Generic.Dictionary<string, string>();
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            parameters["postId"] = postId;
            parameters["targetLang"] = targetLang;
            parameters["truncateAtom"] = truncateAtom;
            parameters["userId"] = userId;
            logger.Debug("Executing activities.get");
            System.IO.Stream ret = this.service.ExecuteRequest(Activities.Resource, "get", body, parameters);
            logger.Debug("Done Executing activities.get");
            return ret;
        }
        
        public virtual System.IO.Stream Insert(string body, string alt, string hl, string preview, string userId) {
            System.Collections.Generic.Dictionary<string, string> parameters = new System.Collections.Generic.Dictionary<string, string>();
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            parameters["preview"] = preview;
            parameters["userId"] = userId;
            logger.Debug("Executing activities.insert");
            System.IO.Stream ret = this.service.ExecuteRequest(Activities.Resource, "insert", body, parameters);
            logger.Debug("Done Executing activities.insert");
            return ret;
        }
        
        public virtual System.IO.Stream List(string alt, string c, string hl, string maxcommentsParam4, string maxlikedParam5, string maxresultsParam6, string scope, string targetLang, string truncateAtom, string userId) {
            string body = null;
            System.Collections.Generic.Dictionary<string, string> parameters = new System.Collections.Generic.Dictionary<string, string>();
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-comments"] = maxcommentsParam4;
            parameters["max-liked"] = maxlikedParam5;
            parameters["max-results"] = maxresultsParam6;
            parameters["scope"] = scope;
            parameters["targetLang"] = targetLang;
            parameters["truncateAtom"] = truncateAtom;
            parameters["userId"] = userId;
            logger.Debug("Executing activities.list");
            System.IO.Stream ret = this.service.ExecuteRequest(Activities.Resource, "list", body, parameters);
            logger.Debug("Done Executing activities.list");
            return ret;
        }
        
        public virtual System.IO.Stream Search(string alt, string bbox, string c, string hl, string lat, string lon, string maxresultsParam7, string pid, string q, string radius, string targetLang, string truncateAtom) {
            string body = null;
            System.Collections.Generic.Dictionary<string, string> parameters = new System.Collections.Generic.Dictionary<string, string>();
            parameters["alt"] = alt;
            parameters["bbox"] = bbox;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["lat"] = lat;
            parameters["lon"] = lon;
            parameters["max-results"] = maxresultsParam7;
            parameters["pid"] = pid;
            parameters["q"] = q;
            parameters["radius"] = radius;
            parameters["targetLang"] = targetLang;
            parameters["truncateAtom"] = truncateAtom;
            logger.Debug("Executing activities.search");
            System.IO.Stream ret = this.service.ExecuteRequest(Activities.Resource, "search", body, parameters);
            logger.Debug("Done Executing activities.search");
            return ret;
        }
        
        public virtual System.IO.Stream Track(string alt, string bbox, string c, string hl, string lat, string lon, string maxresultsParam7, string pid, string q, string radius) {
            string body = null;
            System.Collections.Generic.Dictionary<string, string> parameters = new System.Collections.Generic.Dictionary<string, string>();
            parameters["alt"] = alt;
            parameters["bbox"] = bbox;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["lat"] = lat;
            parameters["lon"] = lon;
            parameters["max-results"] = maxresultsParam7;
            parameters["pid"] = pid;
            parameters["q"] = q;
            parameters["radius"] = radius;
            logger.Debug("Executing activities.track");
            System.IO.Stream ret = this.service.ExecuteRequest(Activities.Resource, "track", body, parameters);
            logger.Debug("Done Executing activities.track");
            return ret;
        }
        
        public virtual System.IO.Stream Update(string body, string abuseType, string alt, string hl, string postId, string scope, string userId) {
            System.Collections.Generic.Dictionary<string, string> parameters = new System.Collections.Generic.Dictionary<string, string>();
            parameters["abuseType"] = abuseType;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            logger.Debug("Executing activities.update");
            System.IO.Stream ret = this.service.ExecuteRequest(Activities.Resource, "update", body, parameters);
            logger.Debug("Done Executing activities.update");
            return ret;
        }
        
        public virtual System.IO.Stream Count(System.Collections.Generic.IDictionary<string, string> parameters) {
            string body = null;
            logger.Debug("Executing activities.count");
            System.IO.Stream ret = this.service.ExecuteRequest(Activities.Resource, "count", body, parameters);
            logger.Debug("Done Executing activities.count");
            return ret;
        }
        
        public virtual System.IO.Stream Delete(string postId, string scope, string userId, System.Collections.Generic.IDictionary<string, string> parameters) {
            string body = null;
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            logger.Debug("Executing activities.delete");
            System.IO.Stream ret = this.service.ExecuteRequest(Activities.Resource, "delete", body, parameters);
            logger.Debug("Done Executing activities.delete");
            return ret;
        }
        
        public virtual System.IO.Stream ExtractPeopleFromSearch(System.Collections.Generic.IDictionary<string, string> parameters) {
            string body = null;
            logger.Debug("Executing activities.extractPeopleFromSearch");
            System.IO.Stream ret = this.service.ExecuteRequest(Activities.Resource, "extractPeopleFromSearch", body, parameters);
            logger.Debug("Done Executing activities.extractPeopleFromSearch");
            return ret;
        }
        
        public virtual System.IO.Stream Get(string postId, string userId, System.Collections.Generic.IDictionary<string, string> parameters) {
            string body = null;
            parameters["postId"] = postId;
            parameters["userId"] = userId;
            logger.Debug("Executing activities.get");
            System.IO.Stream ret = this.service.ExecuteRequest(Activities.Resource, "get", body, parameters);
            logger.Debug("Done Executing activities.get");
            return ret;
        }
        
        public virtual System.IO.Stream Insert(string body, string userId, System.Collections.Generic.IDictionary<string, string> parameters) {
            parameters["userId"] = userId;
            logger.Debug("Executing activities.insert");
            System.IO.Stream ret = this.service.ExecuteRequest(Activities.Resource, "insert", body, parameters);
            logger.Debug("Done Executing activities.insert");
            return ret;
        }
        
        public virtual System.IO.Stream List(string scope, string userId, System.Collections.Generic.IDictionary<string, string> parameters) {
            string body = null;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            logger.Debug("Executing activities.list");
            System.IO.Stream ret = this.service.ExecuteRequest(Activities.Resource, "list", body, parameters);
            logger.Debug("Done Executing activities.list");
            return ret;
        }
        
        public virtual System.IO.Stream Search(System.Collections.Generic.IDictionary<string, string> parameters) {
            string body = null;
            logger.Debug("Executing activities.search");
            System.IO.Stream ret = this.service.ExecuteRequest(Activities.Resource, "search", body, parameters);
            logger.Debug("Done Executing activities.search");
            return ret;
        }
        
        public virtual System.IO.Stream Track(System.Collections.Generic.IDictionary<string, string> parameters) {
            string body = null;
            logger.Debug("Executing activities.track");
            System.IO.Stream ret = this.service.ExecuteRequest(Activities.Resource, "track", body, parameters);
            logger.Debug("Done Executing activities.track");
            return ret;
        }
        
        public virtual System.IO.Stream Update(string body, string postId, string scope, string userId, System.Collections.Generic.IDictionary<string, string> parameters) {
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            logger.Debug("Executing activities.update");
            System.IO.Stream ret = this.service.ExecuteRequest(Activities.Resource, "update", body, parameters);
            logger.Debug("Done Executing activities.update");
            return ret;
        }
    }
}
