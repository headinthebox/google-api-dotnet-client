// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Google.Apis.Samples.CommandLineGeneratedService.Buzz {
    using System;
    using System.IO;
    using System.Collections.Generic;
    using Google.Apis;
    using Google.Apis.Discovery;
    
    
    public class BuzzService : Google.Apis.Discovery.IRequestExecutor {
        
        private Google.Apis.Discovery.IService genericService;
        
        private Google.Apis.Authentication.IAuthenticator authenticator;
        
        private const string Version = "v1";
        
        private const string Name = "buzz";
        
        private const string BaseUri = "https://www.googleapis.com/buzz/v1/";
        
        private const Google.Apis.Discovery.DiscoveryVersion DiscoveryVersionUsed = Google.Apis.Discovery.DiscoveryVersion.Version_0_1;
        
        private Activities activities;
        
        private Comments comments;
        
        private Groups groups;
        
        private People people;
        
        private Photos photos;
        
        private Related related;
        
        public BuzzService(Google.Apis.Discovery.IService genericService, Google.Apis.Authentication.IAuthenticator authenticator) {
            this.genericService = genericService;
            this.authenticator = authenticator;
            this.activities = new Activities(this);
            this.comments = new Comments(this);
            this.groups = new Groups(this);
            this.people = new People(this);
            this.photos = new Photos(this);
            this.related = new Related(this);
        }
        
        public BuzzService() : 
                this(new Google.Apis.Discovery.DiscoveryService(new Google.Apis.Discovery.WebDiscoveryDevice(new System.Uri(("https://www.googleapis.com/discovery/0.1/describe?api=" + BuzzService.Name)))).GetService(BuzzService.Version, BuzzService.DiscoveryVersionUsed, null), Google.Apis.Authentication.AuthenticatorFactory.GetInstance().GetRegisteredAuthenticator()) {
        }
        
        public virtual Activities Activities {
            get {
                return this.activities;
            }
        }
        
        public virtual Comments Comments {
            get {
                return this.comments;
            }
        }
        
        public virtual Groups Groups {
            get {
                return this.groups;
            }
        }
        
        public virtual People People {
            get {
                return this.people;
            }
        }
        
        public virtual Photos Photos {
            get {
                return this.photos;
            }
        }
        
        public virtual Related Related {
            get {
                return this.related;
            }
        }
        
        public virtual System.IO.Stream ExecuteRequest(string resource, string method, string body, System.Collections.Generic.IDictionary<string, string> parameters) {
            Google.Apis.Requests.IRequest request = this.genericService.CreateRequest(resource, method);
            return request.WithParameters(parameters).WithAuthentication(authenticator).WithBody(body).ExecuteRequest();
        }
    }
    
    public class Activities {
        
        private Google.Apis.Discovery.IRequestExecutor service;
        
        private const string Resource = "activities";
        
        private log4net.ILog logger = log4net.LogManager.GetLogger(typeof(Activities));
        
        public Activities(BuzzService service) {
            this.service = service;
        }
        
        public virtual System.IO.Stream Count(string hl, string url) {
            string body = null;
            System.Collections.Generic.Dictionary<string, string> parameters = new System.Collections.Generic.Dictionary<string, string>();
            parameters["hl"] = hl;
            parameters["url"] = url;
            logger.Debug("Executing activities.count");
            System.IO.Stream ret = this.service.ExecuteRequest(Activities.Resource, "count", body, parameters);
            logger.Debug("Done Executing activities.count");
            return ret;
        }
        
        public virtual System.IO.Stream Delete(string alt, string hl, string postId, string scope, string userId) {
            string body = null;
            System.Collections.Generic.Dictionary<string, string> parameters = new System.Collections.Generic.Dictionary<string, string>();
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            logger.Debug("Executing activities.delete");
            System.IO.Stream ret = this.service.ExecuteRequest(Activities.Resource, "delete", body, parameters);
            logger.Debug("Done Executing activities.delete");
            return ret;
        }
        
        public virtual System.IO.Stream ExtractPeopleFromSearch(string alt, string bbox, string c, string hl, string lat, string lon, string maxresultsParam7, string pid, string q, string radius) {
            string body = null;
            System.Collections.Generic.Dictionary<string, string> parameters = new System.Collections.Generic.Dictionary<string, string>();
            parameters["alt"] = alt;
            parameters["bbox"] = bbox;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["lat"] = lat;
            parameters["lon"] = lon;
            parameters["max-results"] = maxresultsParam7;
            parameters["pid"] = pid;
            parameters["q"] = q;
            parameters["radius"] = radius;
            logger.Debug("Executing activities.extractPeopleFromSearch");
            System.IO.Stream ret = this.service.ExecuteRequest(Activities.Resource, "extractPeopleFromSearch", body, parameters);
            logger.Debug("Done Executing activities.extractPeopleFromSearch");
            return ret;
        }
        
        public virtual System.IO.Stream Get(string alt, string hl, string postId, string targetLang, string userId) {
            string body = null;
            System.Collections.Generic.Dictionary<string, string> parameters = new System.Collections.Generic.Dictionary<string, string>();
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            parameters["postId"] = postId;
            parameters["targetLang"] = targetLang;
            parameters["userId"] = userId;
            logger.Debug("Executing activities.get");
            System.IO.Stream ret = this.service.ExecuteRequest(Activities.Resource, "get", body, parameters);
            logger.Debug("Done Executing activities.get");
            return ret;
        }
        
        public virtual System.IO.Stream Insert(string body, string alt, string hl, string media, string preview, string userId) {
            System.Collections.Generic.Dictionary<string, string> parameters = new System.Collections.Generic.Dictionary<string, string>();
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            parameters["media"] = media;
            parameters["preview"] = preview;
            parameters["userId"] = userId;
            logger.Debug("Executing activities.insert");
            System.IO.Stream ret = this.service.ExecuteRequest(Activities.Resource, "insert", body, parameters);
            logger.Debug("Done Executing activities.insert");
            return ret;
        }
        
        public virtual System.IO.Stream List(string alt, string c, string hl, string maxcommentsParam4, string maxlikedParam5, string maxresultsParam6, string scope, string targetLang, string userId) {
            string body = null;
            System.Collections.Generic.Dictionary<string, string> parameters = new System.Collections.Generic.Dictionary<string, string>();
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-comments"] = maxcommentsParam4;
            parameters["max-liked"] = maxlikedParam5;
            parameters["max-results"] = maxresultsParam6;
            parameters["scope"] = scope;
            parameters["targetLang"] = targetLang;
            parameters["userId"] = userId;
            logger.Debug("Executing activities.list");
            System.IO.Stream ret = this.service.ExecuteRequest(Activities.Resource, "list", body, parameters);
            logger.Debug("Done Executing activities.list");
            return ret;
        }
        
        public virtual System.IO.Stream Search(string alt, string bbox, string c, string hl, string lat, string lon, string maxresultsParam7, string pid, string q, string radius, string targetLang) {
            string body = null;
            System.Collections.Generic.Dictionary<string, string> parameters = new System.Collections.Generic.Dictionary<string, string>();
            parameters["alt"] = alt;
            parameters["bbox"] = bbox;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["lat"] = lat;
            parameters["lon"] = lon;
            parameters["max-results"] = maxresultsParam7;
            parameters["pid"] = pid;
            parameters["q"] = q;
            parameters["radius"] = radius;
            parameters["targetLang"] = targetLang;
            logger.Debug("Executing activities.search");
            System.IO.Stream ret = this.service.ExecuteRequest(Activities.Resource, "search", body, parameters);
            logger.Debug("Done Executing activities.search");
            return ret;
        }
        
        public virtual System.IO.Stream Track(string alt, string bbox, string c, string hl, string lat, string lon, string maxresultsParam7, string pid, string q, string radius) {
            string body = null;
            System.Collections.Generic.Dictionary<string, string> parameters = new System.Collections.Generic.Dictionary<string, string>();
            parameters["alt"] = alt;
            parameters["bbox"] = bbox;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["lat"] = lat;
            parameters["lon"] = lon;
            parameters["max-results"] = maxresultsParam7;
            parameters["pid"] = pid;
            parameters["q"] = q;
            parameters["radius"] = radius;
            logger.Debug("Executing activities.track");
            System.IO.Stream ret = this.service.ExecuteRequest(Activities.Resource, "track", body, parameters);
            logger.Debug("Done Executing activities.track");
            return ret;
        }
        
        public virtual System.IO.Stream Update(string body, string abuseType, string alt, string hl, string postId, string scope, string userId) {
            System.Collections.Generic.Dictionary<string, string> parameters = new System.Collections.Generic.Dictionary<string, string>();
            parameters["abuseType"] = abuseType;
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            logger.Debug("Executing activities.update");
            System.IO.Stream ret = this.service.ExecuteRequest(Activities.Resource, "update", body, parameters);
            logger.Debug("Done Executing activities.update");
            return ret;
        }
        
        public virtual System.IO.Stream Count(System.Collections.Generic.IDictionary<string, string> parameters) {
            string body = null;
            logger.Debug("Executing activities.count");
            System.IO.Stream ret = this.service.ExecuteRequest(Activities.Resource, "count", body, parameters);
            logger.Debug("Done Executing activities.count");
            return ret;
        }
        
        public virtual System.IO.Stream Delete(string postId, string scope, string userId, System.Collections.Generic.IDictionary<string, string> parameters) {
            string body = null;
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            logger.Debug("Executing activities.delete");
            System.IO.Stream ret = this.service.ExecuteRequest(Activities.Resource, "delete", body, parameters);
            logger.Debug("Done Executing activities.delete");
            return ret;
        }
        
        public virtual System.IO.Stream ExtractPeopleFromSearch(System.Collections.Generic.IDictionary<string, string> parameters) {
            string body = null;
            logger.Debug("Executing activities.extractPeopleFromSearch");
            System.IO.Stream ret = this.service.ExecuteRequest(Activities.Resource, "extractPeopleFromSearch", body, parameters);
            logger.Debug("Done Executing activities.extractPeopleFromSearch");
            return ret;
        }
        
        public virtual System.IO.Stream Get(string postId, string userId, System.Collections.Generic.IDictionary<string, string> parameters) {
            string body = null;
            parameters["postId"] = postId;
            parameters["userId"] = userId;
            logger.Debug("Executing activities.get");
            System.IO.Stream ret = this.service.ExecuteRequest(Activities.Resource, "get", body, parameters);
            logger.Debug("Done Executing activities.get");
            return ret;
        }
        
        public virtual System.IO.Stream Insert(string body, string userId, System.Collections.Generic.IDictionary<string, string> parameters) {
            parameters["userId"] = userId;
            logger.Debug("Executing activities.insert");
            System.IO.Stream ret = this.service.ExecuteRequest(Activities.Resource, "insert", body, parameters);
            logger.Debug("Done Executing activities.insert");
            return ret;
        }
        
        public virtual System.IO.Stream List(string scope, string userId, System.Collections.Generic.IDictionary<string, string> parameters) {
            string body = null;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            logger.Debug("Executing activities.list");
            System.IO.Stream ret = this.service.ExecuteRequest(Activities.Resource, "list", body, parameters);
            logger.Debug("Done Executing activities.list");
            return ret;
        }
        
        public virtual System.IO.Stream Search(System.Collections.Generic.IDictionary<string, string> parameters) {
            string body = null;
            logger.Debug("Executing activities.search");
            System.IO.Stream ret = this.service.ExecuteRequest(Activities.Resource, "search", body, parameters);
            logger.Debug("Done Executing activities.search");
            return ret;
        }
        
        public virtual System.IO.Stream Track(System.Collections.Generic.IDictionary<string, string> parameters) {
            string body = null;
            logger.Debug("Executing activities.track");
            System.IO.Stream ret = this.service.ExecuteRequest(Activities.Resource, "track", body, parameters);
            logger.Debug("Done Executing activities.track");
            return ret;
        }
        
        public virtual System.IO.Stream Update(string body, string postId, string scope, string userId, System.Collections.Generic.IDictionary<string, string> parameters) {
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            logger.Debug("Executing activities.update");
            System.IO.Stream ret = this.service.ExecuteRequest(Activities.Resource, "update", body, parameters);
            logger.Debug("Done Executing activities.update");
            return ret;
        }
    }
    
    public class Comments {
        
        private Google.Apis.Discovery.IRequestExecutor service;
        
        private const string Resource = "comments";
        
        private log4net.ILog logger = log4net.LogManager.GetLogger(typeof(Comments));
        
        public Comments(BuzzService service) {
            this.service = service;
        }
        
        public virtual System.IO.Stream Delete(string alt, string commentId, string hl, string postId, string userId) {
            string body = null;
            System.Collections.Generic.Dictionary<string, string> parameters = new System.Collections.Generic.Dictionary<string, string>();
            parameters["alt"] = alt;
            parameters["commentId"] = commentId;
            parameters["hl"] = hl;
            parameters["postId"] = postId;
            parameters["userId"] = userId;
            logger.Debug("Executing comments.delete");
            System.IO.Stream ret = this.service.ExecuteRequest(Comments.Resource, "delete", body, parameters);
            logger.Debug("Done Executing comments.delete");
            return ret;
        }
        
        public virtual System.IO.Stream Get(string alt, string commentId, string hl, string postId, string targetLang, string userId) {
            string body = null;
            System.Collections.Generic.Dictionary<string, string> parameters = new System.Collections.Generic.Dictionary<string, string>();
            parameters["alt"] = alt;
            parameters["commentId"] = commentId;
            parameters["hl"] = hl;
            parameters["postId"] = postId;
            parameters["targetLang"] = targetLang;
            parameters["userId"] = userId;
            logger.Debug("Executing comments.get");
            System.IO.Stream ret = this.service.ExecuteRequest(Comments.Resource, "get", body, parameters);
            logger.Debug("Done Executing comments.get");
            return ret;
        }
        
        public virtual System.IO.Stream Insert(string body, string alt, string hl, string postId, string userId) {
            System.Collections.Generic.Dictionary<string, string> parameters = new System.Collections.Generic.Dictionary<string, string>();
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            parameters["postId"] = postId;
            parameters["userId"] = userId;
            logger.Debug("Executing comments.insert");
            System.IO.Stream ret = this.service.ExecuteRequest(Comments.Resource, "insert", body, parameters);
            logger.Debug("Done Executing comments.insert");
            return ret;
        }
        
        public virtual System.IO.Stream List(string alt, string c, string hl, string maxresultsParam4, string postId, string scope, string targetLang, string userId) {
            string body = null;
            System.Collections.Generic.Dictionary<string, string> parameters = new System.Collections.Generic.Dictionary<string, string>();
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-results"] = maxresultsParam4;
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["targetLang"] = targetLang;
            parameters["userId"] = userId;
            logger.Debug("Executing comments.list");
            System.IO.Stream ret = this.service.ExecuteRequest(Comments.Resource, "list", body, parameters);
            logger.Debug("Done Executing comments.list");
            return ret;
        }
        
        public virtual System.IO.Stream Update(string body, string abuseType, string alt, string commentId, string hl, string postId, string scope, string userId) {
            System.Collections.Generic.Dictionary<string, string> parameters = new System.Collections.Generic.Dictionary<string, string>();
            parameters["abuseType"] = abuseType;
            parameters["alt"] = alt;
            parameters["commentId"] = commentId;
            parameters["hl"] = hl;
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            logger.Debug("Executing comments.update");
            System.IO.Stream ret = this.service.ExecuteRequest(Comments.Resource, "update", body, parameters);
            logger.Debug("Done Executing comments.update");
            return ret;
        }
        
        public virtual System.IO.Stream Delete(string commentId, string postId, string userId, System.Collections.Generic.IDictionary<string, string> parameters) {
            string body = null;
            parameters["commentId"] = commentId;
            parameters["postId"] = postId;
            parameters["userId"] = userId;
            logger.Debug("Executing comments.delete");
            System.IO.Stream ret = this.service.ExecuteRequest(Comments.Resource, "delete", body, parameters);
            logger.Debug("Done Executing comments.delete");
            return ret;
        }
        
        public virtual System.IO.Stream Get(string commentId, string postId, string userId, System.Collections.Generic.IDictionary<string, string> parameters) {
            string body = null;
            parameters["commentId"] = commentId;
            parameters["postId"] = postId;
            parameters["userId"] = userId;
            logger.Debug("Executing comments.get");
            System.IO.Stream ret = this.service.ExecuteRequest(Comments.Resource, "get", body, parameters);
            logger.Debug("Done Executing comments.get");
            return ret;
        }
        
        public virtual System.IO.Stream Insert(string body, string postId, string userId, System.Collections.Generic.IDictionary<string, string> parameters) {
            parameters["postId"] = postId;
            parameters["userId"] = userId;
            logger.Debug("Executing comments.insert");
            System.IO.Stream ret = this.service.ExecuteRequest(Comments.Resource, "insert", body, parameters);
            logger.Debug("Done Executing comments.insert");
            return ret;
        }
        
        public virtual System.IO.Stream List(string postId, string scope, string userId, System.Collections.Generic.IDictionary<string, string> parameters) {
            string body = null;
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            logger.Debug("Executing comments.list");
            System.IO.Stream ret = this.service.ExecuteRequest(Comments.Resource, "list", body, parameters);
            logger.Debug("Done Executing comments.list");
            return ret;
        }
        
        public virtual System.IO.Stream Update(string body, string commentId, string postId, string scope, string userId, System.Collections.Generic.IDictionary<string, string> parameters) {
            parameters["commentId"] = commentId;
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            logger.Debug("Executing comments.update");
            System.IO.Stream ret = this.service.ExecuteRequest(Comments.Resource, "update", body, parameters);
            logger.Debug("Done Executing comments.update");
            return ret;
        }
    }
    
    public class Groups {
        
        private Google.Apis.Discovery.IRequestExecutor service;
        
        private const string Resource = "groups";
        
        private log4net.ILog logger = log4net.LogManager.GetLogger(typeof(Groups));
        
        public Groups(BuzzService service) {
            this.service = service;
        }
        
        public virtual System.IO.Stream Delete(string alt, string groupId, string hl, string userId) {
            string body = null;
            System.Collections.Generic.Dictionary<string, string> parameters = new System.Collections.Generic.Dictionary<string, string>();
            parameters["alt"] = alt;
            parameters["groupId"] = groupId;
            parameters["hl"] = hl;
            parameters["userId"] = userId;
            logger.Debug("Executing groups.delete");
            System.IO.Stream ret = this.service.ExecuteRequest(Groups.Resource, "delete", body, parameters);
            logger.Debug("Done Executing groups.delete");
            return ret;
        }
        
        public virtual System.IO.Stream Get(string alt, string groupId, string hl, string userId) {
            string body = null;
            System.Collections.Generic.Dictionary<string, string> parameters = new System.Collections.Generic.Dictionary<string, string>();
            parameters["alt"] = alt;
            parameters["groupId"] = groupId;
            parameters["hl"] = hl;
            parameters["userId"] = userId;
            logger.Debug("Executing groups.get");
            System.IO.Stream ret = this.service.ExecuteRequest(Groups.Resource, "get", body, parameters);
            logger.Debug("Done Executing groups.get");
            return ret;
        }
        
        public virtual System.IO.Stream Insert(string body, string alt, string hl, string userId) {
            System.Collections.Generic.Dictionary<string, string> parameters = new System.Collections.Generic.Dictionary<string, string>();
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            parameters["userId"] = userId;
            logger.Debug("Executing groups.insert");
            System.IO.Stream ret = this.service.ExecuteRequest(Groups.Resource, "insert", body, parameters);
            logger.Debug("Done Executing groups.insert");
            return ret;
        }
        
        public virtual System.IO.Stream List(string alt, string c, string hl, string maxresultsParam4, string userId) {
            string body = null;
            System.Collections.Generic.Dictionary<string, string> parameters = new System.Collections.Generic.Dictionary<string, string>();
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-results"] = maxresultsParam4;
            parameters["userId"] = userId;
            logger.Debug("Executing groups.list");
            System.IO.Stream ret = this.service.ExecuteRequest(Groups.Resource, "list", body, parameters);
            logger.Debug("Done Executing groups.list");
            return ret;
        }
        
        public virtual System.IO.Stream Update(string body, string groupId, string hl, string userId) {
            System.Collections.Generic.Dictionary<string, string> parameters = new System.Collections.Generic.Dictionary<string, string>();
            parameters["groupId"] = groupId;
            parameters["hl"] = hl;
            parameters["userId"] = userId;
            logger.Debug("Executing groups.update");
            System.IO.Stream ret = this.service.ExecuteRequest(Groups.Resource, "update", body, parameters);
            logger.Debug("Done Executing groups.update");
            return ret;
        }
        
        public virtual System.IO.Stream Delete(string groupId, string userId, System.Collections.Generic.IDictionary<string, string> parameters) {
            string body = null;
            parameters["groupId"] = groupId;
            parameters["userId"] = userId;
            logger.Debug("Executing groups.delete");
            System.IO.Stream ret = this.service.ExecuteRequest(Groups.Resource, "delete", body, parameters);
            logger.Debug("Done Executing groups.delete");
            return ret;
        }
        
        public virtual System.IO.Stream Get(string groupId, string userId, System.Collections.Generic.IDictionary<string, string> parameters) {
            string body = null;
            parameters["groupId"] = groupId;
            parameters["userId"] = userId;
            logger.Debug("Executing groups.get");
            System.IO.Stream ret = this.service.ExecuteRequest(Groups.Resource, "get", body, parameters);
            logger.Debug("Done Executing groups.get");
            return ret;
        }
        
        public virtual System.IO.Stream Insert(string body, string userId, System.Collections.Generic.IDictionary<string, string> parameters) {
            parameters["userId"] = userId;
            logger.Debug("Executing groups.insert");
            System.IO.Stream ret = this.service.ExecuteRequest(Groups.Resource, "insert", body, parameters);
            logger.Debug("Done Executing groups.insert");
            return ret;
        }
        
        public virtual System.IO.Stream List(string userId, System.Collections.Generic.IDictionary<string, string> parameters) {
            string body = null;
            parameters["userId"] = userId;
            logger.Debug("Executing groups.list");
            System.IO.Stream ret = this.service.ExecuteRequest(Groups.Resource, "list", body, parameters);
            logger.Debug("Done Executing groups.list");
            return ret;
        }
        
        public virtual System.IO.Stream Update(string body, string groupId, string userId, System.Collections.Generic.IDictionary<string, string> parameters) {
            parameters["groupId"] = groupId;
            parameters["userId"] = userId;
            logger.Debug("Executing groups.update");
            System.IO.Stream ret = this.service.ExecuteRequest(Groups.Resource, "update", body, parameters);
            logger.Debug("Done Executing groups.update");
            return ret;
        }
    }
    
    public class People {
        
        private Google.Apis.Discovery.IRequestExecutor service;
        
        private const string Resource = "people";
        
        private log4net.ILog logger = log4net.LogManager.GetLogger(typeof(People));
        
        public People(BuzzService service) {
            this.service = service;
        }
        
        public virtual System.IO.Stream Delete(string alt, string groupId, string hl, string personId, string userId) {
            string body = null;
            System.Collections.Generic.Dictionary<string, string> parameters = new System.Collections.Generic.Dictionary<string, string>();
            parameters["alt"] = alt;
            parameters["groupId"] = groupId;
            parameters["hl"] = hl;
            parameters["personId"] = personId;
            parameters["userId"] = userId;
            logger.Debug("Executing people.delete");
            System.IO.Stream ret = this.service.ExecuteRequest(People.Resource, "delete", body, parameters);
            logger.Debug("Done Executing people.delete");
            return ret;
        }
        
        public virtual System.IO.Stream Get(string alt, string hl, string userId) {
            string body = null;
            System.Collections.Generic.Dictionary<string, string> parameters = new System.Collections.Generic.Dictionary<string, string>();
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            parameters["userId"] = userId;
            logger.Debug("Executing people.get");
            System.IO.Stream ret = this.service.ExecuteRequest(People.Resource, "get", body, parameters);
            logger.Debug("Done Executing people.get");
            return ret;
        }
        
        public virtual System.IO.Stream Liked(string alt, string c, string groupId, string hl, string maxresultsParam5, string postId, string scope, string userId) {
            string body = null;
            System.Collections.Generic.Dictionary<string, string> parameters = new System.Collections.Generic.Dictionary<string, string>();
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["groupId"] = groupId;
            parameters["hl"] = hl;
            parameters["max-results"] = maxresultsParam5;
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            logger.Debug("Executing people.liked");
            System.IO.Stream ret = this.service.ExecuteRequest(People.Resource, "liked", body, parameters);
            logger.Debug("Done Executing people.liked");
            return ret;
        }
        
        public virtual System.IO.Stream List(string alt, string c, string groupId, string hl, string maxresultsParam5, string userId) {
            string body = null;
            System.Collections.Generic.Dictionary<string, string> parameters = new System.Collections.Generic.Dictionary<string, string>();
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["groupId"] = groupId;
            parameters["hl"] = hl;
            parameters["max-results"] = maxresultsParam5;
            parameters["userId"] = userId;
            logger.Debug("Executing people.list");
            System.IO.Stream ret = this.service.ExecuteRequest(People.Resource, "list", body, parameters);
            logger.Debug("Done Executing people.list");
            return ret;
        }
        
        public virtual System.IO.Stream RelatedToUri(string alt, string hl, string uri, string userId) {
            string body = null;
            System.Collections.Generic.Dictionary<string, string> parameters = new System.Collections.Generic.Dictionary<string, string>();
            parameters["alt"] = alt;
            parameters["hl"] = hl;
            parameters["uri"] = uri;
            parameters["userId"] = userId;
            logger.Debug("Executing people.relatedToUri");
            System.IO.Stream ret = this.service.ExecuteRequest(People.Resource, "relatedToUri", body, parameters);
            logger.Debug("Done Executing people.relatedToUri");
            return ret;
        }
        
        public virtual System.IO.Stream Reshared(string alt, string c, string groupId, string hl, string maxresultsParam5, string postId, string scope, string userId) {
            string body = null;
            System.Collections.Generic.Dictionary<string, string> parameters = new System.Collections.Generic.Dictionary<string, string>();
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["groupId"] = groupId;
            parameters["hl"] = hl;
            parameters["max-results"] = maxresultsParam5;
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            logger.Debug("Executing people.reshared");
            System.IO.Stream ret = this.service.ExecuteRequest(People.Resource, "reshared", body, parameters);
            logger.Debug("Done Executing people.reshared");
            return ret;
        }
        
        public virtual System.IO.Stream Search(string alt, string c, string hl, string maxresultsParam4, string q) {
            string body = null;
            System.Collections.Generic.Dictionary<string, string> parameters = new System.Collections.Generic.Dictionary<string, string>();
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-results"] = maxresultsParam4;
            parameters["q"] = q;
            logger.Debug("Executing people.search");
            System.IO.Stream ret = this.service.ExecuteRequest(People.Resource, "search", body, parameters);
            logger.Debug("Done Executing people.search");
            return ret;
        }
        
        public virtual System.IO.Stream Update(string body, string alt, string groupId, string hl, string personId, string userId) {
            System.Collections.Generic.Dictionary<string, string> parameters = new System.Collections.Generic.Dictionary<string, string>();
            parameters["alt"] = alt;
            parameters["groupId"] = groupId;
            parameters["hl"] = hl;
            parameters["personId"] = personId;
            parameters["userId"] = userId;
            logger.Debug("Executing people.update");
            System.IO.Stream ret = this.service.ExecuteRequest(People.Resource, "update", body, parameters);
            logger.Debug("Done Executing people.update");
            return ret;
        }
        
        public virtual System.IO.Stream Delete(string groupId, string personId, string userId, System.Collections.Generic.IDictionary<string, string> parameters) {
            string body = null;
            parameters["groupId"] = groupId;
            parameters["personId"] = personId;
            parameters["userId"] = userId;
            logger.Debug("Executing people.delete");
            System.IO.Stream ret = this.service.ExecuteRequest(People.Resource, "delete", body, parameters);
            logger.Debug("Done Executing people.delete");
            return ret;
        }
        
        public virtual System.IO.Stream Get(string userId, System.Collections.Generic.IDictionary<string, string> parameters) {
            string body = null;
            parameters["userId"] = userId;
            logger.Debug("Executing people.get");
            System.IO.Stream ret = this.service.ExecuteRequest(People.Resource, "get", body, parameters);
            logger.Debug("Done Executing people.get");
            return ret;
        }
        
        public virtual System.IO.Stream Liked(string groupId, string postId, string scope, string userId, System.Collections.Generic.IDictionary<string, string> parameters) {
            string body = null;
            parameters["groupId"] = groupId;
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            logger.Debug("Executing people.liked");
            System.IO.Stream ret = this.service.ExecuteRequest(People.Resource, "liked", body, parameters);
            logger.Debug("Done Executing people.liked");
            return ret;
        }
        
        public virtual System.IO.Stream List(string groupId, string userId, System.Collections.Generic.IDictionary<string, string> parameters) {
            string body = null;
            parameters["groupId"] = groupId;
            parameters["userId"] = userId;
            logger.Debug("Executing people.list");
            System.IO.Stream ret = this.service.ExecuteRequest(People.Resource, "list", body, parameters);
            logger.Debug("Done Executing people.list");
            return ret;
        }
        
        public virtual System.IO.Stream RelatedToUri(string userId, System.Collections.Generic.IDictionary<string, string> parameters) {
            string body = null;
            parameters["userId"] = userId;
            logger.Debug("Executing people.relatedToUri");
            System.IO.Stream ret = this.service.ExecuteRequest(People.Resource, "relatedToUri", body, parameters);
            logger.Debug("Done Executing people.relatedToUri");
            return ret;
        }
        
        public virtual System.IO.Stream Reshared(string groupId, string postId, string scope, string userId, System.Collections.Generic.IDictionary<string, string> parameters) {
            string body = null;
            parameters["groupId"] = groupId;
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            logger.Debug("Executing people.reshared");
            System.IO.Stream ret = this.service.ExecuteRequest(People.Resource, "reshared", body, parameters);
            logger.Debug("Done Executing people.reshared");
            return ret;
        }
        
        public virtual System.IO.Stream Search(System.Collections.Generic.IDictionary<string, string> parameters) {
            string body = null;
            logger.Debug("Executing people.search");
            System.IO.Stream ret = this.service.ExecuteRequest(People.Resource, "search", body, parameters);
            logger.Debug("Done Executing people.search");
            return ret;
        }
        
        public virtual System.IO.Stream Update(string body, string groupId, string personId, string userId, System.Collections.Generic.IDictionary<string, string> parameters) {
            parameters["groupId"] = groupId;
            parameters["personId"] = personId;
            parameters["userId"] = userId;
            logger.Debug("Executing people.update");
            System.IO.Stream ret = this.service.ExecuteRequest(People.Resource, "update", body, parameters);
            logger.Debug("Done Executing people.update");
            return ret;
        }
    }
    
    public class Photos {
        
        private Google.Apis.Discovery.IRequestExecutor service;
        
        private const string Resource = "photos";
        
        private log4net.ILog logger = log4net.LogManager.GetLogger(typeof(Photos));
        
        public Photos(BuzzService service) {
            this.service = service;
        }
        
        public virtual System.IO.Stream Insert(string body, string albumId, string hl, string media, string userId) {
            System.Collections.Generic.Dictionary<string, string> parameters = new System.Collections.Generic.Dictionary<string, string>();
            parameters["albumId"] = albumId;
            parameters["hl"] = hl;
            parameters["media"] = media;
            parameters["userId"] = userId;
            logger.Debug("Executing photos.insert");
            System.IO.Stream ret = this.service.ExecuteRequest(Photos.Resource, "insert", body, parameters);
            logger.Debug("Done Executing photos.insert");
            return ret;
        }
        
        public virtual System.IO.Stream Insert(string body, string albumId, string userId, System.Collections.Generic.IDictionary<string, string> parameters) {
            parameters["albumId"] = albumId;
            parameters["userId"] = userId;
            logger.Debug("Executing photos.insert");
            System.IO.Stream ret = this.service.ExecuteRequest(Photos.Resource, "insert", body, parameters);
            logger.Debug("Done Executing photos.insert");
            return ret;
        }
    }
    
    public class Related {
        
        private Google.Apis.Discovery.IRequestExecutor service;
        
        private const string Resource = "related";
        
        private log4net.ILog logger = log4net.LogManager.GetLogger(typeof(Related));
        
        public Related(BuzzService service) {
            this.service = service;
        }
        
        public virtual System.IO.Stream List(string alt, string c, string hl, string maxresultsParam4, string postId, string scope, string userId) {
            string body = null;
            System.Collections.Generic.Dictionary<string, string> parameters = new System.Collections.Generic.Dictionary<string, string>();
            parameters["alt"] = alt;
            parameters["c"] = c;
            parameters["hl"] = hl;
            parameters["max-results"] = maxresultsParam4;
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            logger.Debug("Executing related.list");
            System.IO.Stream ret = this.service.ExecuteRequest(Related.Resource, "list", body, parameters);
            logger.Debug("Done Executing related.list");
            return ret;
        }
        
        public virtual System.IO.Stream List(string postId, string scope, string userId, System.Collections.Generic.IDictionary<string, string> parameters) {
            string body = null;
            parameters["postId"] = postId;
            parameters["scope"] = scope;
            parameters["userId"] = userId;
            logger.Debug("Executing related.list");
            System.IO.Stream ret = this.service.ExecuteRequest(Related.Resource, "list", body, parameters);
            logger.Debug("Done Executing related.list");
            return ret;
        }
    }
}
